/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/intel/intent-driven-orchestration/pkg/api/intents/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KPIProfileLister helps list KPIProfiles.
// All objects returned here must be treated as read-only.
type KPIProfileLister interface {
	// List lists all KPIProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KPIProfile, err error)
	// KPIProfiles returns an object that can list and get KPIProfiles.
	KPIProfiles(namespace string) KPIProfileNamespaceLister
	KPIProfileListerExpansion
}

// kPIProfileLister implements the KPIProfileLister interface.
type kPIProfileLister struct {
	indexer cache.Indexer
}

// NewKPIProfileLister returns a new KPIProfileLister.
func NewKPIProfileLister(indexer cache.Indexer) KPIProfileLister {
	return &kPIProfileLister{indexer: indexer}
}

// List lists all KPIProfiles in the indexer.
func (s *kPIProfileLister) List(selector labels.Selector) (ret []*v1alpha1.KPIProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KPIProfile))
	})
	return ret, err
}

// KPIProfiles returns an object that can list and get KPIProfiles.
func (s *kPIProfileLister) KPIProfiles(namespace string) KPIProfileNamespaceLister {
	return kPIProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KPIProfileNamespaceLister helps list and get KPIProfiles.
// All objects returned here must be treated as read-only.
type KPIProfileNamespaceLister interface {
	// List lists all KPIProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KPIProfile, err error)
	// Get retrieves the KPIProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KPIProfile, error)
	KPIProfileNamespaceListerExpansion
}

// kPIProfileNamespaceLister implements the KPIProfileNamespaceLister
// interface.
type kPIProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KPIProfiles in the indexer for a given namespace.
func (s kPIProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KPIProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KPIProfile))
	})
	return ret, err
}

// Get retrieves the KPIProfile from the indexer for a given namespace and name.
func (s kPIProfileNamespaceLister) Get(name string) (*v1alpha1.KPIProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kpiprofile"), name)
	}
	return obj.(*v1alpha1.KPIProfile), nil
}
